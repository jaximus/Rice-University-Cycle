/*
 * Copyright (c) 2015, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== i2ctmp006.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');

var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
/*
 *  Program.stack is ignored with IAR. Use the project options in
 *  IAR Embedded Workbench to alter the system stack size.
 */
if (!Program.build.target.$name.match(/iar/)) {
    /*
     *  Reducing the system stack size (used by ISRs and Swis) to reduce
     *  RAM usage.
     */
    Program.stack = 0x300;
}

/*
 * Comment this line to allow module names to be loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = false;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 2;

/*
 * Comment this line to allow Error, Assert, and Log strings to be
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
 */
Text.isLoaded = false;

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
System.SupportProxy = SysMin;
SysMin.bufSize = 128;

/* Enable Semihosting for GNU targets to print to CCS console */
if (Program.build.target.$name.match(/gnu/)) {
    var SemiHost = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
}

/* ================ BIOS configuration ================ */
/*
 * Disable unused BIOS features to minimize footprint.
 * This example uses Tasks but not Swis or Clocks.
 */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = false;

BIOS.heapSize = 2048;

/* Runtime stack checking is performed */
Task.checkStackFlag = true;
Hwi.checkStackFlag = true;

/* Reduce the number of task priorities */
Task.numPriorities = 5;

/* ================ Task configuration ================ */
/*var task0Params = new Task.Params();
task0Params.instance.name = "imuTask";
task0Params.stackSize = 1024;
task0Params.priority = 2;
Program.global.task = Task.create("&taskFxn", task0Params);


var task3Params0 = new Task.Params();
task3Params0.instance.name = "proximityTask";
task3Params0.priority = 2;
task3Params0.arg0 = 10;
Program.global.proximityTask = Task.create("&proximityFxn", task3Params0);
*/

var task2Params0 = new Task.Params();
task2Params0.instance.name = "EncoderTask";
task2Params0.priority = 2;
task2Params0.arg0 = 10;
Program.global.proximityTask = Task.create("&EncoderFxn", task2Params0);

/**
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var swiParams = new Swi.Params();
swiParams.
program.global.swi0 = Swi.create("&MotorSWI",swiParams);
*/
var timer = xdc.useModule('ti.sysbios.hal.Timer');
var timerParams = new Timer.Params();
//timerParams.periodType = Timer_PeriodType_MICROSECS;
timerParams.period = 3000;//2millisec
timerParams.arg = 1;
timer.create(1, '&myTimerFunc', timerParams);


var timerParams2 = new Timer.Params();
//timerParams.periodType = Timer_PeriodType_MICROSECS;
timerParams2.period = 2000*100;//.04sec
timer.create(2, '&CalcNewPos', timerParams2);




var timerParams5= new Timer.Params();
//timerParams.periodType = Timer_PeriodType_MICROSECS;
timerParams5.period = 1000*100;//.04sec
timer.create(5, '&EscControl', timerParams5);

var task4Params = new Task.Params();


task4Params.instance.name = "sdTask";
task4Params.priority = 2;
Program.global.sdTask = Task.create("&SDTaskFxn", task4Params);

var task5Params = new Task.Params();

task5Params.instance.name = "BNOTask";
task5Params.priority = 2;
Program.global.sdTask = Task.create("&BNOTaskFxn", task5Params);



/* ================ Semaphore configuration ================ */

var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "proximitySemaphore";
Program.global.proximitySemaphore = Semaphore.create(null, semaphore0Params);


var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "imuSemaphore";
Program.global.imuSemaphore = Semaphore.create(0, semaphore1Params);

var semaphore2Params = new Semaphore.Params();
semaphore2Params.instance.name = "sdSemaphore";
Program.global.sdSemaphore = Semaphore.create(null, semaphore2Params);


/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
TIRTOS.useGPIO = true;
TIRTOS.useI2C = true;
TIRTOS.useUART = true;
TIRTOS.useSDSPI = true;
Clock.tickPeriod = 200;
TIRTOS.usePWM = true;
